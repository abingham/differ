
0. Use --unified=99999999999 and thus avoid having to stitch hunks and lines back together.
Briefly looked into this. Works but decided not to do this. I think it could well be slower
since I already have all of the old_files and new_files and this recreates a lot of their content.
Using --unified=0 is nice as I have all of old_files new_files and just have to stitch the
minimal hunk in.

1. Look into a possible git diff option to remove the last line info message...
\\ No newline at end of file
Looked. Found nothing....

2. Look into the --word-diff option
File was
1aaa bbb ccc ddd eee
2ddd
3eee
4ggg hhh iii jjj
5hhh
6iii
7jjj

File now
1aaa bbIb ccc ddd ee
2ddd
3eee
4III
5ggg hhh iii jjj
6hhh
7jjj

Diff with --word-diff
diff --git a/lines b/lines
index 1a12f46..4f84352 100644
--- a/lines
+++ b/lines
@@ -1 +1 @@
aaa [-bbb-]{+bbIb+} ccc ddd [-eee-]{+ee+}
@@ -3,0 +4 @@ eee
{+III+}
@@ -6 +6,0 @@ hhh
[-iii-]



3. Look into --word-diff-regex=.
File was
1aaa bbb ccc ddd eee
2ddd
3eee
4ggg hhh iii jjj
5hhh
6iii
7jjj

File now
1aaa bbIb ccc ddd ee
2ddd
3eee
4III
5ggg hhh iii jjj
6hhh
7jjj

Diff with --word-diff-regex=.
diff --git a/lines b/lines
index 1a12f46..4f84352 100644
--- a/lines
+++ b/lines
@@ -1 +1 @@
aaa bb{+I+}b ccc ddd ee[-e-]
@@ -3,0 +4 @@ eee
{+III+}
@@ -6 +6,0 @@ hhh
[-iii-]

However..... [git diff --help] has this...
Show words as [-removed-] and {+added+}.
Makes no attempts to escape the delimiters
if they appear in the input, so the output may
be ambiguous.
